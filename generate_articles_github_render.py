import os
import re
import subprocess
import sys
import requests
import pandas as pd
from dotenv import load_dotenv
from openai import OpenAI

# üì¶ V√©rifie et installe openpyxl
try:
    import openpyxl
except ImportError:
    print("üì¶ Installation de openpyxl...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "openpyxl"])
    import openpyxl

# üîê Chargement des variables d‚Äôenvironnement
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
LARAVEL_API = os.getenv("LARAVEL_API")  # ex : https://llredac.fr/api/generate-articles

# üß† G√©n√®re un article optimis√© SEO
def generate_article(keyword):
    try:
        print(f"üß† G√©n√©ration article SEO : {keyword}")
        prompt = f"""
Tu es un r√©dacteur web expert en SEO et UX. R√©dige un article de blog de plus de 1000 mots, structur√© pour le web, 
avec des titres H2 et H3 optimis√©s pour le r√©f√©rencement naturel. L‚Äôarticle doit √™tre naturel, informatif, engageant 
(et ne jamais sembler √©crit par une IA). Ajoute des paragraphes courts, des mots de transition, des titres attrayants 
et des expressions s√©mantiques pertinentes autour du sujet. √âvite les introductions robotiques.
Th√®me : {keyword}
"""
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Tu es un expert en r√©daction humaine optimis√©e pour le SEO naturel."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.6
        )
        content = response.choices[0].message.content
        lines = content.strip().split("\n")
        title = lines[0].strip("# ").strip()
        body = "\n".join(lines[1:]).strip()
        return title, body
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration article : {e}")
        return None, None

# üì§ Envoie l'article √† Laravel
def send_to_laravel(title, content, keyword):
    print(f"üì§ Envoi √† Laravel : {title}")
    try:
        image_path = "storage/photos/1/Google I/Google IO 2025.png"
        data = {
            "title": title,
            "content": content,
            "key_words": keyword,
            "cover_image": image_path,
            "thumbnail_image": image_path
        }

        headers = {
            "Accept": "application/json",
            "Content-Type": "application/x-www-form-urlencoded",
            "User-Agent": "SEOArticleBot/1.0"
        }

        response = requests.post(LARAVEL_API, data=data, headers=headers, timeout=30)
        response.raise_for_status()

        if "application/json" in response.headers.get("Content-Type", ""):
            json_response = response.json()
            print("‚úÖ R√©ponse Laravel :", json_response)
            return True, json_response.get("post_id")
        else:
            print("‚ö†Ô∏è R√©ponse non-JSON :", response.text[:1000])
            return False, None

    except requests.exceptions.HTTPError as e:
        print("‚ùå Erreur HTTP Laravel :", e.response.status_code, e.response.text[:500])
        return False, None
    except Exception as e:
        print("‚ùå Erreur d‚Äôenvoi √† Laravel :", str(e))
        return False, None

# ‚ñ∂Ô∏è Script principal
def main():
    excel_file = "keywords.xlsx"
    try:
        df = pd.read_excel(excel_file, engine='openpyxl')
    except Exception as e:
        print("‚ùå Fichier Excel illisible :", e)
        return

    # Ajoute les colonnes si absentes
    if 'envoye' not in df.columns:
        df['envoye'] = 0
    if 'post_id' not in df.columns:
        df['post_id'] = None

    for idx, row in df.iterrows():
        if row.get("envoye", 0) == 1:
            continue  # d√©j√† envoy√©

        keyword = str(row.get("mot_cle", "")).strip()
        if not keyword:
            print("‚ö†Ô∏è Mot-cl√© manquant. Ignor√©.")
            continue

        title, content = generate_article(keyword)
        if not title or not content:
            print("‚ö†Ô∏è Article non g√©n√©r√©.")
            continue

        success, post_id = send_to_laravel(title, content, keyword)
        if success:
            df.at[idx, 'envoye'] = 1
            df.at[idx, 'post_id'] = post_id
            print("‚úÖ Article envoy√© et post_id enregistr√©.\n")
        else:
            print("‚ùå √âchec d'envoi.\n")

    # Enregistre les modifications dans le fichier Excel
    try:
        df.to_excel(excel_file, index=False, engine='openpyxl')
        print("üíæ Fichier Excel mis √† jour avec les post_id.")
    except Exception as e:
        print("‚ùå Erreur lors de la sauvegarde du fichier :", e)

if __name__ == "__main__":
    main()
