#!/usr/bin/env python3

import os
import re
import sys
import subprocess
import requests
import pandas as pd
from dotenv import load_dotenv

# üì¶ Installation conditionnelle
required = ['openai', 'markdown', 'bs4', 'openpyxl']
for pkg in required:
    try:
        __import__(pkg)
    except ImportError:
        subprocess.check_call([sys.executable, "-m", "pip", "install", pkg])

import markdown
from bs4 import BeautifulSoup
from openai import OpenAI

# üîê Config
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
LARAVEL_API = os.getenv("LARAVEL_API")
IMAGE_PATH = "storage/photos/1/Google I/Google IO 2025.png"

def generate_article(keyword):
    print(f"üß† G√©n√©ration de contenu pour : {keyword}")
    prompt = f"""Tu es un r√©dacteur web senior, expert en SEO et UX, sp√©cialis√© dans la r√©daction d‚Äôarticles optimis√©s pour Google et agr√©ables √† lire.

Ta mission : r√©diger un article HTML de **plus de 1000 mots** (au moins 6000 caract√®res), sur le sujet suivant : **{keyword}**.

### Structure attendue :
- Commence par un **titre principal SEO** (servira de <title> mais ne doit pas √™tre une balise <h1>)
    - Doit inclure le mot-cl√© principal
    - Ne doit pas d√©passer 65 caract√®res
    - Doit inciter au clic (ex. : ‚ÄúComment‚Ä¶‚Äù, ‚ÄúTop 10‚Ä¶‚Äù, ‚ÄúPourquoi‚Ä¶‚Äù)
- Ajoute une **balise meta-description HTML** (<160 caract√®res) contenant le mot-cl√© principal
- Structure l‚Äôarticle avec **au moins 7 sections H2** :
  <h2 class="section__title"><em>...</em></h2>
- Ajoute des sous-sections H3 si n√©cessaire :
  <h3 class="section__title"><em>...</em></h3>
- Utilise des listes <ul><li>...</li></ul> si pertinent
- Utilise des paragraphes courts (<p>) optimis√©s pour la lecture web

### Contraintes SEO :
- Le mot-cl√© principal doit appara√Ætre :
  - dans au moins un <h2>
  - dans deux paragraphes
  - dans une liste <ul>
  - dans la meta-description
- √âvite toute suroptimisation : densit√© naturelle (~1% √† 2%)
- Int√®gre des variantes s√©mantiques et expressions longue tra√Æne
- N‚Äôutilise pas de titres "Introduction" ou "Conclusion"
- Ne commence pas par "Dans cet article‚Ä¶"
- Ne dis jamais que tu es une IA
- R√©dige dans un style fluide, humain et informatif
- Adopte un **ton √† la fois persuasif et technique** : d√©montre l‚Äôexpertise sur le sujet tout en incitant √† lire, √† s‚Äôinformer ou √† agir.
- Utilise un vocabulaire professionnel, pr√©cis et argument√©.
- Mets en avant des b√©n√©fices concrets ou des points diff√©renciateurs pour convaincre l‚Äôinternaute.

- √âcris pour une intention de recherche **informationnelle**
- Ne cr√©e pas de tableau HTML
- G√©n√©re uniquement le contenu HTML (pas de <html>, <head>, <body>)"""
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Tu √©cris du contenu SEO comme un humain."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.8
        )
        html = response.choices[0].message.content
        title = extract_title_from_html(html)
        clean_html = sanitize_html(html)
        print(f"‚úÖ Article g√©n√©r√© pour '{keyword}' ‚Äî Titre : {title}")
        return title, clean_html
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration avec OpenAI : {e}")
        return None, None

def extract_title_from_html(html):
    soup = BeautifulSoup(html, 'html.parser')
    h2 = soup.find('h2')
    return h2.get_text(strip=True) if h2 else "Article sans titre"

def sanitize_html(html):
    soup = BeautifulSoup(html, 'html.parser')
    return str(soup)

def send_to_laravel(title, content, keyword):
    print(f"üì§ Envoi vers Laravel pour : {keyword}")
    try:
        data = {
            "title": title,
            "content": content,
            "key_words": keyword,
            "cover_image": IMAGE_PATH,
            "thumbnail_image": IMAGE_PATH
        }
        headers = {
            "Accept": "application/json",
            "Content-Type": "application/x-www-form-urlencoded",
            "User-Agent": "SEOArticleBot/1.0"
        }
        response = requests.post(LARAVEL_API, data=data, headers=headers, timeout=30)
        response.raise_for_status()
        if "application/json" in response.headers.get("Content-Type", ""):
            print("‚úÖ Article envoy√© √† Laravel avec succ√®s.")
            return True, response.json().get("post_id")
        print("‚ö†Ô∏è R√©ponse non-JSON :", response.text[:500])
        return False, None
    except Exception as e:
        print(f"‚ùå Erreur lors de l‚Äôenvoi √† Laravel : {e}")
        return False, None

def main():
    print("üöÄ Script de g√©n√©ration d‚Äôarticles lanc√©.")
    try:
        df = pd.read_excel("keywords.xlsx", engine='openpyxl')
        print("üìñ Fichier Excel charg√©.")
    except Exception as e:
        print(f"‚ùå Erreur lecture Excel : {e}")
        return

    if 'envoye' not in df.columns:
        df['envoye'] = 0
    if 'post_id' not in df.columns:
        df['post_id'] = None

    for idx, row in df.iterrows():
        if row.get("envoye", 0) == 1:
            print(f"‚è© Mot-cl√© d√©j√† trait√© : {row.get('mot_cle')}")
            continue

        keyword = str(row.get("mot_cle", "")).strip()
        if not keyword:
            print("‚ö†Ô∏è Mot-cl√© vide, ligne ignor√©e.")
            continue

        title, content = generate_article(keyword)
        if not title or not content or len(content) < 2000:
            print(f"‚ö†Ô∏è Article trop court ou invalide pour : {keyword}")
            continue

        success, post_id = send_to_laravel(title, content, keyword)
        if success:
            df.at[idx, 'envoye'] = 1
            df.at[idx, 'post_id'] = post_id
            print("‚úÖ Article publi√© et sauvegard√©.")
        else:
            print("‚ö†Ô∏è √âchec de publication Laravel.")

    try:
        df.to_excel("keywords.xlsx", index=False, engine='openpyxl')
        print("üíæ Fichier Excel mis √† jour avec les statuts.")
    except Exception as e:
        print(f"‚ùå Erreur lors de l‚Äô√©criture du fichier Excel : {e}")

    print("üèÅ Fin du script.")

if __name__ == "__main__":
    main()
